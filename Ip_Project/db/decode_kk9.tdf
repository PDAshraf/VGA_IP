--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_kk9
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode654w[3..0]	: WIRE;
	w_anode671w[3..0]	: WIRE;
	w_anode681w[3..0]	: WIRE;
	w_anode691w[3..0]	: WIRE;
	w_anode701w[3..0]	: WIRE;
	w_anode711w[3..0]	: WIRE;
	w_anode721w[3..0]	: WIRE;
	w_anode731w[3..0]	: WIRE;
	w_anode741w[3..0]	: WIRE;
	w_anode752w[3..0]	: WIRE;
	w_anode762w[3..0]	: WIRE;
	w_anode772w[3..0]	: WIRE;
	w_anode782w[3..0]	: WIRE;
	w_anode792w[3..0]	: WIRE;
	w_anode802w[3..0]	: WIRE;
	w_anode812w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode731w[3..3], w_anode721w[3..3], w_anode711w[3..3], w_anode701w[3..3], w_anode691w[3..3], w_anode681w[3..3], w_anode671w[3..3], w_anode654w[3..3]);
	eq_wire2w[] = ( w_anode812w[3..3], w_anode802w[3..3], w_anode792w[3..3], w_anode782w[3..3], w_anode772w[3..3], w_anode762w[3..3], w_anode752w[3..3], w_anode741w[3..3]);
	w_anode654w[] = ( (w_anode654w[2..2] & (! data_wire[2..2])), (w_anode654w[1..1] & (! data_wire[1..1])), (w_anode654w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode671w[] = ( (w_anode671w[2..2] & (! data_wire[2..2])), (w_anode671w[1..1] & (! data_wire[1..1])), (w_anode671w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode681w[] = ( (w_anode681w[2..2] & (! data_wire[2..2])), (w_anode681w[1..1] & data_wire[1..1]), (w_anode681w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode691w[] = ( (w_anode691w[2..2] & (! data_wire[2..2])), (w_anode691w[1..1] & data_wire[1..1]), (w_anode691w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode701w[] = ( (w_anode701w[2..2] & data_wire[2..2]), (w_anode701w[1..1] & (! data_wire[1..1])), (w_anode701w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode711w[] = ( (w_anode711w[2..2] & data_wire[2..2]), (w_anode711w[1..1] & (! data_wire[1..1])), (w_anode711w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode721w[] = ( (w_anode721w[2..2] & data_wire[2..2]), (w_anode721w[1..1] & data_wire[1..1]), (w_anode721w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode731w[] = ( (w_anode731w[2..2] & data_wire[2..2]), (w_anode731w[1..1] & data_wire[1..1]), (w_anode731w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode741w[] = ( (w_anode741w[2..2] & (! data_wire[2..2])), (w_anode741w[1..1] & (! data_wire[1..1])), (w_anode741w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode752w[] = ( (w_anode752w[2..2] & (! data_wire[2..2])), (w_anode752w[1..1] & (! data_wire[1..1])), (w_anode752w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode762w[] = ( (w_anode762w[2..2] & (! data_wire[2..2])), (w_anode762w[1..1] & data_wire[1..1]), (w_anode762w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode772w[] = ( (w_anode772w[2..2] & (! data_wire[2..2])), (w_anode772w[1..1] & data_wire[1..1]), (w_anode772w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode782w[] = ( (w_anode782w[2..2] & data_wire[2..2]), (w_anode782w[1..1] & (! data_wire[1..1])), (w_anode782w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode792w[] = ( (w_anode792w[2..2] & data_wire[2..2]), (w_anode792w[1..1] & (! data_wire[1..1])), (w_anode792w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode802w[] = ( (w_anode802w[2..2] & data_wire[2..2]), (w_anode802w[1..1] & data_wire[1..1]), (w_anode802w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode812w[] = ( (w_anode812w[2..2] & data_wire[2..2]), (w_anode812w[1..1] & data_wire[1..1]), (w_anode812w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
