--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_r8a
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode463w[1..0]	: WIRE;
	w_anode472w[3..0]	: WIRE;
	w_anode489w[3..0]	: WIRE;
	w_anode499w[3..0]	: WIRE;
	w_anode509w[3..0]	: WIRE;
	w_anode519w[3..0]	: WIRE;
	w_anode529w[3..0]	: WIRE;
	w_anode539w[3..0]	: WIRE;
	w_anode549w[3..0]	: WIRE;
	w_anode561w[1..0]	: WIRE;
	w_anode568w[3..0]	: WIRE;
	w_anode579w[3..0]	: WIRE;
	w_anode589w[3..0]	: WIRE;
	w_anode599w[3..0]	: WIRE;
	w_anode609w[3..0]	: WIRE;
	w_anode619w[3..0]	: WIRE;
	w_anode629w[3..0]	: WIRE;
	w_anode639w[3..0]	: WIRE;
	w_data461w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode639w[3..3], w_anode629w[3..3], w_anode619w[3..3], w_anode609w[3..3], w_anode599w[3..3], w_anode589w[3..3], w_anode579w[3..3], w_anode568w[3..3]), ( w_anode549w[3..3], w_anode539w[3..3], w_anode529w[3..3], w_anode519w[3..3], w_anode509w[3..3], w_anode499w[3..3], w_anode489w[3..3], w_anode472w[3..3]));
	w_anode463w[] = ( (w_anode463w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode472w[] = ( (w_anode472w[2..2] & (! w_data461w[2..2])), (w_anode472w[1..1] & (! w_data461w[1..1])), (w_anode472w[0..0] & (! w_data461w[0..0])), w_anode463w[1..1]);
	w_anode489w[] = ( (w_anode489w[2..2] & (! w_data461w[2..2])), (w_anode489w[1..1] & (! w_data461w[1..1])), (w_anode489w[0..0] & w_data461w[0..0]), w_anode463w[1..1]);
	w_anode499w[] = ( (w_anode499w[2..2] & (! w_data461w[2..2])), (w_anode499w[1..1] & w_data461w[1..1]), (w_anode499w[0..0] & (! w_data461w[0..0])), w_anode463w[1..1]);
	w_anode509w[] = ( (w_anode509w[2..2] & (! w_data461w[2..2])), (w_anode509w[1..1] & w_data461w[1..1]), (w_anode509w[0..0] & w_data461w[0..0]), w_anode463w[1..1]);
	w_anode519w[] = ( (w_anode519w[2..2] & w_data461w[2..2]), (w_anode519w[1..1] & (! w_data461w[1..1])), (w_anode519w[0..0] & (! w_data461w[0..0])), w_anode463w[1..1]);
	w_anode529w[] = ( (w_anode529w[2..2] & w_data461w[2..2]), (w_anode529w[1..1] & (! w_data461w[1..1])), (w_anode529w[0..0] & w_data461w[0..0]), w_anode463w[1..1]);
	w_anode539w[] = ( (w_anode539w[2..2] & w_data461w[2..2]), (w_anode539w[1..1] & w_data461w[1..1]), (w_anode539w[0..0] & (! w_data461w[0..0])), w_anode463w[1..1]);
	w_anode549w[] = ( (w_anode549w[2..2] & w_data461w[2..2]), (w_anode549w[1..1] & w_data461w[1..1]), (w_anode549w[0..0] & w_data461w[0..0]), w_anode463w[1..1]);
	w_anode561w[] = ( (w_anode561w[0..0] & data_wire[3..3]), enable_wire);
	w_anode568w[] = ( (w_anode568w[2..2] & (! w_data461w[2..2])), (w_anode568w[1..1] & (! w_data461w[1..1])), (w_anode568w[0..0] & (! w_data461w[0..0])), w_anode561w[1..1]);
	w_anode579w[] = ( (w_anode579w[2..2] & (! w_data461w[2..2])), (w_anode579w[1..1] & (! w_data461w[1..1])), (w_anode579w[0..0] & w_data461w[0..0]), w_anode561w[1..1]);
	w_anode589w[] = ( (w_anode589w[2..2] & (! w_data461w[2..2])), (w_anode589w[1..1] & w_data461w[1..1]), (w_anode589w[0..0] & (! w_data461w[0..0])), w_anode561w[1..1]);
	w_anode599w[] = ( (w_anode599w[2..2] & (! w_data461w[2..2])), (w_anode599w[1..1] & w_data461w[1..1]), (w_anode599w[0..0] & w_data461w[0..0]), w_anode561w[1..1]);
	w_anode609w[] = ( (w_anode609w[2..2] & w_data461w[2..2]), (w_anode609w[1..1] & (! w_data461w[1..1])), (w_anode609w[0..0] & (! w_data461w[0..0])), w_anode561w[1..1]);
	w_anode619w[] = ( (w_anode619w[2..2] & w_data461w[2..2]), (w_anode619w[1..1] & (! w_data461w[1..1])), (w_anode619w[0..0] & w_data461w[0..0]), w_anode561w[1..1]);
	w_anode629w[] = ( (w_anode629w[2..2] & w_data461w[2..2]), (w_anode629w[1..1] & w_data461w[1..1]), (w_anode629w[0..0] & (! w_data461w[0..0])), w_anode561w[1..1]);
	w_anode639w[] = ( (w_anode639w[2..2] & w_data461w[2..2]), (w_anode639w[1..1] & w_data461w[1..1]), (w_anode639w[0..0] & w_data461w[0..0]), w_anode561w[1..1]);
	w_data461w[2..0] = data_wire[2..0];
END;
--VALID FILE
